#ifndef STATS_H
#define STATS_H

/* Επιστρέφει το filetype του αρχείου, όπου τιμή 1 δηλώνει αρχείο σωρού, τιμή 2
 * αρχείο κατακερματισμού και τιμή 3 αρχείο δευτερεύοντος ευρετηρίου.
 * Αρχικοποιεί την μεταβλητή filetype σε -1, και την αλλάζει ανάλογα το είδος
 * του αρχείου στην αντίστοιχη τιμή. Αν δεν βρεθεί αντιστοιχία σε κάποιο είδος
 * αρχείου, παραμένει -1. Τέλος, η μεταβλητή filetype επιστρέφεται. */
int STATS_GetFiletype(void *info);

/* Επιστρέφει το πλήθος των blocks του αρχείου. Εκμεταλλεύεται την έτοιμη
 * συνάρτηση BF_GetBlockCounter. */
int STATS_NumberOfBlocks(void *info, int filetype);

/* Επιστρέφει το ελάχιστο πλήθος εγγραφών που έχει κάθε bucket του αρχείου. Για
 * κάθε bucket διατρέχουμε τα blocks, βρίσκουμε πόσες εγγραφές έχει το καθένα κι
 * αθροίζουμε τις εγγραφές των blocks. Αν οι εγγραφές του bucket είναι λιγότερες
 * από το min_records, τότε το τελευταίο παίρνει την τιμή του πρώτου */
int STATS_MinRecordsNum(void *info, int filetype);

/* Ίδια με την παραπάνω, αλλά επιστρέφει το μέγιστο πλήθος εγγραφών. */
int STATS_MaxRecordsNum(void *info, int filetype);

/* Επιστρέφει το πλήθος των κάδων του αρχείου κατακερματισμού/δευτερεύοντος
 * ευρετηρίου. Χρησιμοποιείται για τον υπολογισμό του μέσου αριθμού των blocks
 * που έχει κάθε bucket, καθώς ο τελευταίος θα ισούται με το πλήθος των blocks
 * (STATS_NumberOfBlocks) προς το πλήθος των κάδων. */
int STATS_BucketsNum(void *info, int filetype);

/* Εκτυπώνει το πλήθος των buckets που έχουν block υπερχείλισης, και πόσα block
 * είναι αυτά για κάθε bucket. Διατρέχει τους κάδους κι υπολογίζει για τον
 * καθέναν τις αντίστοιχες τιμές και τις εκτυπώνει. */
int STATS_PrintOverflowStats(void *info, int filetype);

/* Καλεί τις παραπάνω συναρτήσεις. Αυτή καλείται από την εκάστοτε main με τα
 * κατάλληλα ορίσματα. */
int HashStatistics(void *info);

#endif // STATS_H
